name: Version and Tag Release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'CHANGELOG.md'
  workflow_dispatch:
    inputs:
      force_update:
        description: "Force update even if tag exists"
        required: false
        default: "false"

jobs:
  create-tag-and-trigger-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PACKAGES }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          
      - name: Extract version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=v$VERSION" >> $GITHUB_ENV
          echo "Raw version from package.json: $VERSION"
          echo "Tag name: v$VERSION"
      
      - name: Check if tag already exists
        id: check-tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.TAG_NAME }}$"; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
            echo "Tag ${{ env.TAG_NAME }} already exists"
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
            echo "Tag ${{ env.TAG_NAME }} does not exist yet"
          fi
      
      - name: Extract release notes from CHANGELOG.md
        id: extract-release-notes
        run: |
          # Extract version without 'v' prefix for matching in CHANGELOG
          echo "Looking for version $VERSION in CHANGELOG.md"
          
          # Use awk to extract the content for the current version from CHANGELOG.md
          # This extracts everything between the version header and the next version header
          RELEASE_NOTES=$(awk -v version="## [$VERSION]" '
            BEGIN { found=0; }
            $0 ~ version { found=1; next; }
            found && $0 ~ /^## \[/ { found=0; }
            found { print $0; }
          ' CHANGELOG.md)
          
          # Create a temporary file for the release notes
          echo "$RELEASE_NOTES" > release_notes.md
          echo "Release notes extracted to release_notes.md"
          
          # Show the first few lines for debugging
          head -n 5 release_notes.md || true
          
          # Create a summary of the release notes for commit message
          SUMMARY=$(echo "$RELEASE_NOTES" | grep -v "^$" | head -n 3)
          echo "SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create and push tag
        if: env.TAG_EXISTS == 'false' || github.event.inputs.force_update == 'true'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create an annotated tag with release notes
          COMMIT_MSG="Release ${{ env.TAG_NAME }}"
          if [[ -n "${{ env.SUMMARY }}" ]]; then
            COMMIT_MSG="$COMMIT_MSG
            
            ${{ env.SUMMARY }}"
          fi
          
          # Delete tag if it exists and force update is enabled
          if [[ "${{ env.TAG_EXISTS }}" == "true" && "${{ github.event.inputs.force_update }}" == "true" ]]; then
            echo "Force updating existing tag"
            git tag -d ${{ env.TAG_NAME }} || true
            git push --delete origin ${{ env.TAG_NAME }} || true
          fi
          
          # Create and push the tag
          git tag -a ${{ env.TAG_NAME }} -m "$COMMIT_MSG"
          git push origin ${{ env.TAG_NAME }}
          
          echo "Created and pushed tag ${{ env.TAG_NAME }}"
          echo "The build workflow should now be triggered automatically"
