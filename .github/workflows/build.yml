name: Build Electron Apps

on:
  push:
    tags: ["v*"] # Only trigger on version tags
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build (e.g., v1.2.0)"
        required: false
      branch:
        description: "Branch to build from (main or dev)"
        required: false
        default: "main"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Determine ref to checkout
        id: determine-ref
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "Using workflow dispatch with specified tag: ${{ github.event.inputs.tag }}"
            echo "ref=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.branch }}" ]; then
            echo "Using workflow dispatch with specified branch: ${{ github.event.inputs.branch }}"
            echo "ref=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "Using pushed tag: ${{ github.ref }}"
            echo "ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.determine-ref.outputs.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      # For Windows, we might need to set build configuration first
      - name: Configure build environment (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          npm config set msvs_version 2019
        shell: bash

      # Install all dependencies from package.json
      - name: Install dependencies
        run: npm ci

      # Build the app
      - name: Build Electron app
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            CSC_IDENTITY_AUTO_DISCOVERY=false npm run build:mac
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            CSC_IDENTITY_AUTO_DISCOVERY=false npm run build:win
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.PACKAGES }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code for release notes
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "TAG=$TAG" >> $GITHUB_ENV
            echo "Using version $VERSION from tag $TAG"
          else
            echo "Not a tag push, using 'latest'"
            echo "TAG=latest" >> $GITHUB_ENV
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Extract release notes from CHANGELOG.md
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Create a Node.js script for extracting release notes
          cat > extract-changelog.js << 'EOF'
          /**
           * Extract version-specific release notes from CHANGELOG.md
           */
          const fs = require('fs');

          // Get version from command line
          const version = process.argv[2];
          if (!version) {
            console.error('Please provide a version number');
            process.exit(1);
          }

          try {
            // Read the changelog file
            const changelog = fs.readFileSync('./CHANGELOG.md', 'utf8');
            
            // Split into lines, handling both CRLF and LF
            const lines = changelog.split(/\r?\n/);
            
            // Find the starting line with our version
            let startLine = -1;
            const versionHeaderPattern = `## [${version}]`;
            
            for (let i = 0; i < lines.length; i++) {
              if (lines[i].includes(versionHeaderPattern)) {
                startLine = i;
                break;
              }
            }
            
            if (startLine === -1) {
              console.error(`Version ${version} not found in changelog`);
              process.exit(1);
            }
            
            // Find the next version header or end of file
            let endLine = lines.length;
            
            for (let i = startLine + 1; i < lines.length; i++) {
              if (lines[i].match(/^## \[\d+\.\d+\.\d+\]/)) {
                endLine = i;
                break;
              }
            }
            
            // Extract the relevant lines
            // Skip the header line itself
            const releaseNotes = lines.slice(startLine + 1, endLine).join('\n').trim();
            
            // Output to console
            console.log(releaseNotes);
            
            // Save to file
            fs.writeFileSync('release_notes.md', releaseNotes);
            
          } catch (error) {
            console.error(`Error extracting release notes: ${error.message}`);
            process.exit(1);
          }
          EOF

          # Execute the script
          if [ -n "${{ env.VERSION }}" ]; then
            echo "Looking for version ${{ env.VERSION }} in CHANGELOG.md using Node.js extractor"
            node extract-changelog.js "${{ env.VERSION }}"
            
            # Show the content for debugging
            echo "===== BEGIN RELEASE NOTES ====="
            cat release_notes.md
            echo "===== END RELEASE NOTES ====="
          else
            echo "No version found, using default release notes"
            echo "Latest build from branch ${GITHUB_REF#refs/heads/}" > release_notes.md
          fi

          # Make sure the file is not empty
          if [ ! -s release_notes.md ]; then
            echo "Warning: release_notes.md is empty! Adding default content."
            echo "Release ${{ env.TAG || github.ref_name }}" > release_notes.md
          fi

      - name: Generate release notes manually if not found
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Explicitly check if release notes content was found
          if ! grep -q "[A-Za-z]" release_notes.md; then
            echo "No specific release notes found for version ${{ env.VERSION }}."
            echo "Creating manual release notes."
            echo "### Release ${{ env.TAG }}" > release_notes.md
            echo "" >> release_notes.md
            echo "This release includes various improvements and bug fixes." >> release_notes.md
            echo "" >> release_notes.md
            echo "For detailed information, please check the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) file." >> release_notes.md
          fi

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display artifacts
        run: ls -R dist

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release ${{ env.TAG || github.ref_name }}"
          tag_name: "${{ env.TAG || github.ref_name }}"
          body_path: release_notes.md
          files: |
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.zip
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGES }}

      # Discord notification
      - name: Send Discord Notification
        if: success()
        run: |
          # Get short SHA
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"

          # Determine release info
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            RELEASE_TAG="${GITHUB_REF#refs/tags/}"
            RELEASE_NAME="$RELEASE_TAG"
            BRANCH_COLOR="2201331"  # Blue for tags
          else
            RELEASE_TAG="latest"
            RELEASE_NAME="Latest Build"
            BRANCH_COLOR="4885929"  # Green for main
          fi

          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG"

          # Create Discord payload
          cat > discord-payload.json << EOF
          {
            "embeds": [{
              "title": "🚀StreamNet Rebrands Panels",
              "color": $BRANCH_COLOR,
              "description": "A new version has been built and released!",
              "fields": [
                {
                  "name": "🏷️ Version",
                  "value": "$RELEASE_NAME",
                  "inline": true
                },
                {
                  "name": "🧠 Commit",
                  "value": "[\`$SHORT_SHA\`]($COMMIT_URL)",
                  "inline": true
                },
                {
                  "name": "📦 Download",
                  "value": "[Release Page]($RELEASE_URL)",
                  "inline": false
                },
                {
                  "name": "💻 Platforms",
                  "value": "Windows, macOS",
                  "inline": false
                }
              ],
              "thumbnail": {
                "url": "https://github.com/cyb3rgh05t/rebrand-tool/blob/main/assets/icons/png/256x256.png?raw=true"
              },
              "footer": {
                "text": "Built with ❤️ by cyb3rgh05t",
                "icon_url": "https://github.com/${{ github.repository_owner }}.png"
              },
              "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            }]
          }
          EOF

          # Send the webhook if DISCORD_WEBHOOK exists
          if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            curl -X POST ${{ secrets.DISCORD_WEBHOOK }} \
              -H "Content-Type: application/json" \
              -d @discord-payload.json
          fi
        shell: bash
